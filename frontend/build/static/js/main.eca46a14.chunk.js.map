{"version":3,"sources":["componenets/navbar.js","componenets/gallery.js","componenets/mosaic.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","Menu","pointing","secondary","Item","name","active","onClick","window","location","reload","Header","color","as","to","Gallery","props","className","class","Image","src","mosaic","href","target","Mosaic","useState","data","image","images","info","loader","display","message","gallery","setImage","Fragment","Container","textAlign","style","id","Form","onSubmit","e","preventDefault","console","log","Group","Input","label","type","float","accept","onChange","files","mosaicc","required","multiple","Button","axios","defaults","xsrfCookieName","xsrfHeaderName","csrftoken","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","handleRefresh","App","placeholder","handleImageChange","handleSubmit","postImage","a","form_data","FormData","append","headers","post","res","status","loaded","Segment","width","exact","path","render","fluid","component","padding","map","index","key","Boolean","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.eca46a14.chunk.js","sourcesContent":["import React from 'react'\nimport { Header, Menu } from \"semantic-ui-react\";\nimport { Link } from 'react-router-dom';\nimport '../App.css'\n\nexport default function Navbar() {\n\n    // const topFunction = () => {\n    //     document.body.scroll.scrollTop = 0; // For Safari\n    //     document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera\n    // }\n\n    const handleRefresh = () => {\n        window.location.reload();\n    }\n\n    return (\n        <Menu pointing secondary>\n        <Menu.Item\n            name='editorials'\n            active=\"\"\n            onClick={handleRefresh}\n            >\n            <Header color=\"teal\" as='h1'>MosaicApp</Header>\n        </Menu.Item>\n        <Menu.Menu >\n        <Menu.Item\n            name='editorials'\n            active=\"\"\n            >\n            <Link to=\"/\" color=\"black\">Quick Mosaic</Link>\n        </Menu.Item>\n        <Menu.Item\n            name='reviews'\n            active=\"\"\n            >\n            <Link to=\"/mosaic\">Use Your Images</Link>\n        </Menu.Item>\n        </Menu.Menu>\n    </Menu>\n    )\n}\n","import React from 'react'\nimport { Image } from \"semantic-ui-react\";\nimport '../App.css'\n\nexport default function Gallery(props) {\n\n    return(\n        <div className=\"img\">\n        <section class=\"box\" >\n            <Image src={props.mosaic}/>\n            <div class=\"dn-btn\" >    \n                <a href={props.mosaic} target=\"_blank\">Download and View</a>\n            </div>\n        </section>\n        </div>\n    )\n}","import React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport { Button, Form, Image, Header, Container } from \"semantic-ui-react\";\nimport '../App.css'\n\nexport default function Mosaic() {\n\n    const [image, setImage] = useState({\n        data: {\n            name:'image',\n            image: null,\n            mosaic: null\n        },\n        images: [],\n        info: \"block\",\n        loader: \"none\",\n        display: \"none\",\n        message: \"\",\n        gallery: []\n    });\n\n\n    const handleImageChange = (e) =>{\n        setImage({\n            ...image,\n            data: {\n                ...image.data.name,\n                image: e.target.files[0],\n                ...image.data.mosaicc\n            }\n        })\n    };\n\n    const handleSourceImageChange = (e) => {\n        setImage({\n            ...image,\n            images: e.target.files\n        })\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(image);\n        postImageTest();\n    } \n\n    function postImageTest(){\n        setImage({\n            ...image,\n            info: \"none\",\n            display: \"block\"\n        })\n    }\n\n    async function postImage() {\n        setImage({\n            ...image,\n            info: \"none\",\n            display: \"block\",\n            loader: \"block\"\n        })\n        let form_data1 = new FormData();\n        form_data1.append('image', image.data.image, image.data.image.name);\n        form_data1.append('name', image.data.name);\n        \n\n        const headers = {\n            headers: {\n                'content-type': 'multipart/form-data'\n            }\n        }\n\n        var i = 0;\n        const tot = parseInt(image.images.length);\n        const images = Array.from(image.images)\n        console.log(images)\n\n        for (const img of images) {\n            let form_data2 = new FormData();\n            form_data2.append('image', img, img.name);\n            form_data2.append('album', 1 );\n\n            const res1 = await axios.post( 'http://localhost:8000/api/images/', form_data2, headers);\n            if (res1.status > 400) {\n                return setImage(() => {\n                    return { placeholder: \"Something went wrong!\" };\n                });\n            }\n            console.log(res1)\n\n            i += 1;\n\n            setImage({\n                ...image,\n                info: \"none\",\n                display: \"block\",\n                loader: \"block\",\n                message: `...Finished Processing ${i} out of ${tot} files.`\n            })\n\n        }\n\n        setImage({\n            ...image,\n            info: \"none\",\n            display: \"block\",\n            loader: \"block\",\n            message: 'Creating Mosaic. This will take a few seconds...'\n        })\n\n        const res = await axios.post('http://localhost:8000/api/newmosaic/', form_data1, headers);\n        if (res.status > 400) {\n            return setImage(() => {\n                return { placeholder: \"Something went wrong!\" };\n            });\n        }\n\n        setImage(() => {\n            return {\n                ...image,\n                data: {\n                    name: res.data.name,\n                    image: res.data.image,\n                    mosaic: res.data.mosaic \n                },\n                info: \"none\",\n                loaded: \"none\",\n                display: \"block\",\n            };\n        });\n    }\n\n    return (\n        <React.Fragment>\n            <div>\n                <Header as='h3'>Use Your Images</Header>\n            </div>\n    \n            <Container textAlign=\"center\" >\n                                <div class=\"info\" style = {{display: image.info}}>\n                                    <p>Upload image files for the main image and the mosiac images.</p> \n                                         <p>The more images the better.</p>\n                                </div>\n                                <div class=\"img\" style={{display: image.display}}>\n                                    <div class=\"loader-wrapper\" id=\"toggle2\" style = {{display:image.loader}}>\n                                        <div class = \"first\">\n                                            <span class=\"loader\"><span class=\"loader-inner\"></span></span>\n                                        </div>\n                                        <div class = \"second\">\n                                            <p>{image.message}</p>\n                                        </div>\n                                    </div> \n                                    <section class=\"box\" >\n                                        <p color=\"white\">This feature is comming soon... </p>\n                                        <div class=\"dn-btn\" >\n                                            <a href=\"\" target=\"_blank\">Thankyou</a>\n                                        </div>\n                                    </section>\n                                </div>\n                            </Container>\n                            <Form onSubmit={handleSubmit} style = {{display:image.info}}>\n                                <Form.Group>\n                                        <Form.Input\n                                            label=\"Main Image\"  \n                                            type=\"file\"\n                                            float=\"left\"\n                                            id=\"image\"\n                                            accept=\"image/png, image/jpeg, image/jpg\" \n                                            onChange={handleImageChange} required/>\n                                        <Form.Input\n                                            label=\"Mosaic Images\"\n                                            type=\"file\"\n                                            float=\"left\"\n                                            id=\"image\"\n                                            accept=\"image/png, image/jpeg, image/jpg\"\n                                            onChange={handleSourceImageChange} required multiple/>\n                                </Form.Group>\n                                <Button float color=\"teal\" type=\"submit\">Create Mosaic</Button>\n                            </Form>\n                        </React.Fragment>\n    )\n}\n","import React, { useState} from \"react\";\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport axios from 'axios';\nimport { Segment, Form, Image, Header, Container, Button } from \"semantic-ui-react\";\nimport Navbar from './componenets/navbar'\nimport Gallery from './componenets/gallery'\nimport Mosaic from './componenets/mosaic'\nimport './App.css'\n\n\naxios.defaults.xsrfCookieName = 'csrftoken'\naxios.defaults.xsrfHeaderName = 'X-CSRFToken'\n\nfunction getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\nvar csrftoken = getCookie('csrftoken');\n\nconst handleRefresh = () => {\n    window.location.reload();\n}\n\nfunction App() {\n    const [image, setImage] = useState({\n        data: {\n            name:'image',\n            image: null,\n            mosaic: null\n        },\n        info: \"block\",\n        loader: \"none\",\n        display: \"none\",\n        placeholder: \"none\",\n        gallery: [\n            \"static/mosaic/mosaic1.jpg\",\n            \"static/mosaic/mosaic2.jpg\",\n            \"static/mosaic/mosaic3.jpg\",\n            \"static/mosaic/mosaic4.jpg\",\n            \"static/mosaic/mosaic5.jpg\",\n            \"static/mosaic/mosaic6.jpeg\",\n            \n        ]\n    });\n\n    const handleImageChange = (e) =>{\n        setImage({\n            ...image,\n            data: {\n                ...image.data.name,\n                image: e.target.files[0],\n                ...image.data.mosaic\n            }\n        })\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(image);\n        postImage();\n    }   \n\n    // async function getImage() {\n    //     const res = await axios.get('http://localhost:8000/api/mosaic/');\n    //     if (res.status > 400) {\n    //         return setImage(() => {\n    //             return { placeholder: \"Something went wrong!\" };\n    //         });\n    //     }\n    //     const mosaic = res.data.map(data => data.mosaic);\n    //     console.log(res.data);\n    //     console.log(mosaic);\n    //     setImage({\n    //         ...image,\n    //         gallery: mosaic\n    //     })\n    //     console.log(image.gallery)\n    // }\n\n    async function postImage() {\n        setImage({\n            ...image,\n            info: \"none\",\n            display: \"block\",\n            loader: \"block\"\n        })\n        let form_data = new FormData();\n        form_data.append('image', image.data.image, image.data.image.name);\n        form_data.append('name', image.data.name);\n        const headers = {\n            headers: {\n                \"X-CSRFToken\": csrftoken,\n                'content-type': 'multipart/form-data',\n            }\n        }\n        const res = await axios.post('/api/mosaic/', form_data, headers);\n        if (res.status > 400) {\n            return setImage(() => {\n                return { \n                    ...image,\n                    info: \"none\",\n                    loaded: \"none\",\n                    display: \"block\",\n                    placeholder: \"block\" };\n            });\n        }\n\n        setImage(() => {\n            return {\n                ...image,\n                data: {\n                    name: res.data.name,\n                    image: res.data.image,\n                    mosaic: res.data.mosaic \n                },\n                info: \"none\",\n                loaded: \"none\",\n                display: \"block\"\n            };\n        });\n    }\n\n    return (\n        <Router>\n        <div className=\"App\">\n            <Segment style={{width:600}}>\n                <Navbar />\n                <div className=\"scroll\">\n                    <Route exact path=\"/\" render={props => (\n                        <React.Fragment>\n                            <div >\n                                <Header as='h3'>Quick Mosaic</Header>\n                            </div>\n                            <Container textAlign=\"center\" >\n                                <div class=\"info\" style = {{display: image.info}}>\n                                    <p>Upload an image file to create a mosaic</p>\n                                </div>\n                                <div class=\"img\" style={{display: image.display}}>\n                                    <div class=\"loader-wrapper\" id=\"toggle2\" style = {{display:image.loader}}>\n                                        <div class = \"first\">\n                                            <span class=\"loader\"><span class=\"loader-inner\"></span></span>\n                                        </div>\n                                        <div class = \"second\">\n                                            <p>Creating Mosaic. This will take a few seconds...</p>\n                                        </div>\n                                    </div> \n                                    <section class=\"box\" >\n                                        <Image src={image.data.mosaic}/>\n                                        <div style = {{display:image.placeholder}}>\n                                            <p>Somthing went wrong! Please reload the page and try again.</p>\n                                        </div>\n                                        <div class=\"dn-btn\" >\n                                            <a href={image.data.mosaic} target=\"_blank\">Download and View</a>\n                                        </div>\n                                        <div class=\"btn\">\n                                            <Button fluid onClick={handleRefresh}>Make Another Mosaic</Button>\n                                        </div>\n                                    </section>\n                                </div>\n                            </Container>\n                            <Form onSubmit={handleSubmit} style = {{display:image.info}}>\n                                <Form.Group>\n                                        <Form.Input type=\"file\"\n                                            float=\"left\"\n                                            id=\"image\"\n                                            accept=\"image/png, image/jpeg, image/jpg\" \n                                            onChange={handleImageChange} required/>\n                                        <Form.Button color=\"teal\" type=\"submit\">Create Mosaic</Form.Button>\n                                </Form.Group>\n                            </Form>\n                        </React.Fragment>\n                    )} />\n                    <Route path=\"/mosaic\" component={Mosaic} />\n                    <Container padding=\"1rem\">\n                        <div class=\"gallery\">\n                            <Header as='h3'>Mosaic Gallery</Header>\n                        </div>\n                        <div>\n                            {image.gallery.map((mosaic, index) => (\n                                <Gallery\n                                    key={index}\n                                    index={index}\n                                    mosaic={mosaic}\n                                    />\n                                ))}\n                        </div>\n                    </Container>\n                </div>\n            </Segment>\n        </div>\n        </Router> \n    );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}